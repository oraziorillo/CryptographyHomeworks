import numpy as np
from ecpy.curves     import Curve,Point
from ecpy.keys       import ECPublicKey, ECPrivateKey
from ecpy.ecdsa      import ECDSA
import hashlib as Hash
import ecpy
import base64


#####################
###TEST PARAMETERS###
#####################
"""
###### Exercise 1
Q1_p =  115792089237316195423570985008687907853269984665640564039457584007908834671663
Q1_G =  (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)
Q1_pk =  (33545960315798433920319244737215348112692523979856343417399758114982340369572, 110455257450006111693370921577088298568435500798132266311752008913199166911803)
Q1a_arr = [('Jeanne voted for Old Joe', 11985921268038449207991085312329107123081841310813426812822758246079498332105, 69801731981609574336499189716590785634661696281321781776635565348464219715233), ('John voted for Old Joe', 38259242896596501662027244726341650946183534165652666650262571177891191249869, 62941553097541453317942799277931989932844210928480186294394958282340631936858), ('Patty voted for Old Joe', 29386237957506322112427928108794547766508117739210693881377563324100571497396, 43966042130652891764157475567894713787052402912749509222855351336116871259959), ('Sherrod voted for Old Joe', 9337683858563145595785383050435007115762932303758389412050322131213481465420, 80126064325735579515999291892348812258477027652062492363759304225798493779325), ('Richard voted for Old Joe', 69259384811849316191320707408294323623419852664216480922379997554286104873114, 34334156283841477809628085034749645103766453801736727335370583200836325622350), ('Amy voted for Old Joe', 59376647796448927782981175731229073462088755733271739834553613689815201049356, 74964180812786462650212682628168184443183891254454661518745344055473244337351), ('Deb voted for Old Joe', 67057674079951996230180842270031379809126017860700943989071707855939851444000, 98788084207993350160258882750127000374992719238774721026185783069491098997174), ('Christopher voted for Old Joe', 86275363850567296013212183391163226952707135175523577134702139966519282989166, 103302150794297344746533317192491546376989804812883733970833336847356211356853), ('Mike voted for Old Joe', 5778477094231776024007737264190669359227840989172390450421310405353555863391, 27491723810195269551176594718848872140617217414341680344910733099201606199849), ('Sheldon voted for Papy McDonald', 88498658089238550841273056318516766616634215950229473130192626742190245379486, 24882043114104999453111933040246996921132113772071453949034590285376018499189), ('Josh voted for Old Joe', 21618066443255214906102614291449199271050201428355540688027500043292719297541, 20152644310675882316833965879075890592203709569215978946014150819178584819562), ('Kevin voted for Old Joe', 35586123463732542337095896523840237362657611168484152829960417611061627062446, 97426976098939130705433848464864499502593464635852290560250312720609963963259), ('Maria voted for Old Joe', 87199343561631035804675681983322286409853560375891279328029233729125072191817, 63441944199602720665218728058639152735724064961185582779456870822279672935630), ('Tom voted for Old Joe', 14966608782276087587006798078119292232639701237138057812582661631269736545408, 92677343828233517404607179241950674227116955616305793077082256642769248137622), ('Dianne voted for Old Joe', 50959128010135713844516882859255142898661570347450381569669077915103780192357, 114129058581131596769564027024760797911673137127631262598470398897502029912821), ('James voted for Old Joe', 2619336408480230683038650825533551460053878804876135245586481301549741825563, 28276018644690708036622489300685430248125486589046247582925205940401914904606), ('Pat voted for Old Joe', 86280091251472014446344049656217724432030236847616697397950759234526123985091, 62434897307920223934422700854817434385134919214289626769973697069531169765010), ('Lindsey voted for Old Joe', 19840770052334850354637007630593517355276982416039956378662405044113430173178, 46354795297595180680049719061617118269844584133951190426411075543421318495682), ('Rick voted for Old Joe', 33401089226232782173690304071010692728951052874841345174282999404164169049306, 29027922211149116953099323929753182144151703945964841942071431339548882045799), ('Johnny voted for Old Joe', 24038087966153637059796916761197338708757184322846918486442982647025623931898, 102871627222289509014875772865916567180406566392143100477675171348743339503306), ('Rob voted for Papy McDonald', 65731553746069753383305815439109955199548613477045664065986821018357078357644, 41024437286671727715530002889621825999311878660626937716465456122616857292475), ('Michael  voted for Old Joe', 80365728619834082039402000581869038757657440383017881169962705144863672130158, 25724880212239275471318595804332980960444378362076635443837926691614181067790), ('Lamar voted for Old Joe', 58660012137848707143837105567644005929884451481651386375346253984713803776335, 42838401224517703143869289110218998031909630952561968407142159083817524366085), ('Ben voted for Papy McDonald', 63112245673910741448391396916672444233047869660701971644603275330629079966535, 50051765313713050593882391498477539251727023187168899091730219799523921943334), ('Kamala voted for Old Joe', 114183813015343892414852671756295810021384038518324165578750008006042458615921, 68227864238144891568252578220959604257025431788016040120318641907014536470511), ('Benjamin voted for Old Joe', 47104172174722005445620278354421140516098805375638585767386662021031523590856, 67918036411362379225087303719529115036287075608079722995081333864250201657399), ('Ted voted for Papy McDonald', 26073799444850426862164462839778740915940060712658671702443993948906578587422, 18927697203108856307167575417388924965812919935804889271273066713368894744735), ('Angus voted for Papy McDonald', 111342946007072734865076687464793832943917734264385485182445842747049500670141, 31758212358661507129236984905002942141657369020855233440974792347252980808301), ('Gary voted for Old Joe', 91824742478709501740709005825453833862176139649630831721219612541521332559733, 1999913464516044529576266218913431840792842533537641531051368889587003324218), ('Mike voted for Old Joe', 3694636390045570101849040740628547676949054799093461660452359760411785981219, 53755287405731023375889961505759316934967592503295056323748592377369445089824)]
Q1b_arr = [('Harry voted for Old Joe', 115102856681532979173655335079607774539493662796605822092689061157637696072815, 58336898828934988332194166240928273242902207872787109322299184731044712529329), ('Bill voted for Old Joe', 115102856681532979173655335079607774539493662796605822092689061157637696072815, 113267203963395794489816893640195873068664320712331992948563026214397264161633)]
Q1b_k = 112515654880177480647730983341963220506644125280259763032319540164638738027578
"""

#####################
###REAL PARAMETERS###
#####################
#Group=3
###### Exercise 1
Q1_p =  115792089237316195423570985008687907853269984665640564039457584007908834671663
Q1_G =  (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)
Q1_pk =  (97083451407648280481400175660113987508710315989881497838905103554238144521841, 104085011557372495097712206887535356825440531599510505562437663349879926107898)
Q1a_arr = [('Margaret voted for Old Joe', 48917168388608540854745247602651593892358404257835755933026327284803028296854, 84064426989527898048201185810801731575740392064732869066755282637255202020236), ('Patrick voted for Papy McDonald', 69617714328092462023161828905137782343754239597775899940857671081166974027069, 89877845552847579232681677080577076951444868115539982168859751553597001142633), ('Elizabeth voted for Papy McDonald', 75304545733841664405340635544105008965080689907310557052211694178505950922682, 8145455277511601484923753463591920890931139870194948292226588395010763533824), ('Mark voted for Papy McDonald', 46747023592075964573901690701721230999314292307116944699121553103718521382062, 82343349373753908927582886118882281221984369499239680256013568350739211832833), ('Bill voted for Old Joe', 9977848512983191618546088845847130703723464101762705536068091672075838268752, 8640320100500986647193114747999301360551528089541490783794693207256395092378), ('John voted for Papy McDonald', 26138176158364669985076544381235040973371590276573104372817912795391242537367, 47738578077052875404868624353891150603922810915988256472258096090083323546258), ('Patty voted for Papy McDonald', 44944181786752455358798075046376448380665379927115654126769884327514946603999, 34736476820459489671417568030049506389671833943974082551811137236033923172344), ('Benjamin voted for Old Joe', 60585572554342085822817997808436812451854366603175185002633331209923561046658, 87762229190455284999184242892305926777810134970056122831332593581681358399163), ('Joni voted for Old Joe', 22386984459001694971854514088027631690871325073697145987770182153849378341372, 36166248354394163129599942526893104146505186571480931955066705655060737460502), ('Jeanne voted for Papy McDonald', 72004509918391669413483703506238709165563124922195790515376836590012396131368, 37970976733598268731177147553803199488767371088475290717074943044174063241824), ('Catherine voted for Old Joe', 19190676184234224017215121424356062966680519926376155787573810368449125310440, 109183523610079014714822824539858225823767566600846890227435152353972933707481), ('Ted voted for Papy McDonald', 99371690736231527534565347648808013303738179940281609964820916445494014815072, 58704269460179276667596173380384631280867842260946249252862868850110368051198), ('Jeff voted for Papy McDonald', 49302873659104915787247904969869768608539720316251894427942996835240372671327, 12451228369675562987180032078857099242413165040568899474153750553612896801814), ('Martha voted for Papy McDonald', 46544934394981513762378572666467680939110746692151093096023948583043875598072, 39569672852082725047504385986881358829553974981510194841818922046095446809455), ('Kyrsten voted for Old Joe', 75682708506836287817520837080098083265078261869045342990177852745805515843683, 105488138651277382278878482820253709350163077858556739885450231878153009569526), ('Shelley voted for Old Joe', 101027181973937600560955070924548609321502641959335556843572325867853414500668, 16296118866278613034201967523320722903106377285313509153882918772256803005255), ('Robert voted for Old Joe', 96474064747030482683487162089877531930751575771958238086528783160315352536466, 91110156808769992675946196917802716452318441821398260111488939892566927382442), ('Maria voted for Old Joe', 82340782722640186189046465183874217095566963193347430364805570737082832683868, 104788957231190295446076689504482983116319092716121288965495000410201331216770), ('Charles voted for Papy McDonald', 35686138075043978798257027151372102389658203620672888011090891960448169749278, 48386778290992380052934320415398242574016695813528430586064749553928374199007), ('John voted for Papy McDonald', 45049137196000881509550864468593259383814321801429415062683128424899646080126, 30973800248178854258222009508028462025106946087955262382976402610187657607156), ('Cory voted for Old Joe', 37054316528658482410354283631276291238165426566394524616865674763297916634739, 86245341540924942686528184652879819484423207167713293810791197635630888715526), ('Cindy voted for Papy McDonald', 41610828043530544688828668859490806368873626512406852153656777045797666214294, 6623818592019023863084402266380001848222054095020865382865772825861286434610), ('Tom voted for Old Joe', 71180144670707233614015103766209652034012519896812536480781866120484386793235, 74694385987380684488743438717688776411424348231200340344993107154899285384017), ('John voted for Old Joe', 97061048873413771833069213690160010013821293406972607415080777165727958543836, 24230635842158514968330771140203839892961452161927703925859080905861943522334), ('Gordon voted for Papy McDonald', 53761626605519995389797755371293315334030838172050657996290067442684098214790, 16510349166384481016364943135902906359453972850556080912268929307245900799042), ('Johnny voted for Old Joe', 99180486073004575015508234526567532692569241742035821226085125517062172532179, 72786677834105150273911287261843938540249540893055677878170498753532842129756), ('Amy voted for Papy McDonald', 94701742358149926514428777657899739087198508913187041542264145122115800508650, 51377238824757568913380324784090394481407305838914187576060020918932513398650), ('Lamar voted for Old Joe', 53577056732761423675738525280006415728852667060881039771785174378021754093021, 79975904948828978808026990244493146489824966522266050288583474997112075842437), ('Brian voted for Papy McDonald', 65520462909478365339235853007494854199124199445655181949987690174379643087340, 2803104043922219153386041276432895858786802657710699588129378716512631788421), ('Ron voted for Old Joe', 65086292426476508094507844363407959871711368305112492239438354148297707502176, 10440355976266148494198229278239075364133818396810299803088309944483633577196)]
Q1b_arr = [('Calvin voted for Old Joe', 49485725043336507035922345480889714727211822770395388554237883440384950768750, 27068608732725735648868346843849078588774188881901094472799448384138318985532), ('James voted for Old Joe', 49485725043336507035922345480889714727211822770395388554237883440384950768750, 84431117581482447682287636374168558645058502733132672465431317589240606532373)]
Q1b_k = 79474460641006906187856679531101129022412900200958651662673884011733088144541



def verBalots(Field, generator, publicKey, votes):
    """
    Verifies that a given set of balots are valid.
    inputs: Field: int conveying the cardinality of the field
            generator: generator of the subfield
            publicKey: 2-tuple of integers representing a point on the curve
            votes: List of three-tuples consisting of a string and the signature.
    returns:Strings corresponding to non-valid balots.
    """
    curve = Curve.get_curve('secp256k1')
    pkPoint = ecpy.curves.Point(publicKey[0], publicKey[1], curve)
    pk = ecpy.keys.ECPublicKey(pkPoint)
    G = generator
    signer = ECDSA()
    erroneousVotes = [] 
    
    for vote in votes:
        formattedSig = ecpy.formatters.encode_sig(vote[1],vote[2])
        if signer.verify(Hash.sha256(vote[0].encode()).digest(), formattedSig,  pk):
            continue
        else:
            erroneousVotes += [vote[0]]
    return erroneousVotes


def extendedGCD(x,y):
    """
    input: x, y integers
    :return: (gcd(x,y), a, b) such that ax + by = gcd(x,y).
    Note that if gcd(x,y) = 1 it calculates the inverses of
    x and y modulo y and modulo x.
    """
    change = False
    if y > x:
        x,y = y,x
        change = True
    a = 0; a_old = 1
    b = 1; b_old = 0
    r = y; r_old = x
    while r != 0:
        q = int(r_old // r)
        r_old, r = r, int(r_old - q*r)
        a_old, a = a, int(a_old - q*a)
        b_old, b = b, int(b_old - q*b)
    if change:
        return int(r_old), int(b_old), int(a_old)
    return int(r_old), int(a_old), int(b_old)

def sign(votes, k, p):
    """
    Given two votes encrypted with the same k over secp256k1, we encrypt the message 'I won this election, by a lot!' using specified k.
    inputs: votes: list with two 3-tuples consisting of a string and its signature
            k: Specified integer to use in ECDSA encryption
            p: characteristic
    returns: The signature (r, s), with r, s integers, of the message 'I won this election by a lot.
    """

    #Initialise our curve and the cardinality of the subgroup.
    curve = Curve.get_curve('secp256k1')
    n = curve.order

    e = [None] * len(votes)
    z = [None] * len(votes)
    s = [votes[0][2], votes[1][2]]
    for i in range(len(votes)): #Loop generating the first len(n)-bits of the hashed strings in "votes".
        """
            We are trying to get the leftmost L_n bits of the hashed messages converted to integers.
            L_n is the length of the binary representation of n.
        """
        e[i] = int.from_bytes(Hash.sha256(votes[i][0].encode()).digest(), "big")

        z[i] = bin(e[i])
        z[i] = z[i][0:len(bin(n))]

    
    z[0] = int(z[0], 2)
    z[1] = int(z[1], 2)
    
    #Use Euclid's algorithm to calculate inverses of s[0] - s[1] and r = votes[0][1]
    ds, As, Bs = extendedGCD((s[0] - s[1]) % n, n)
    dr, Ar, Br = extendedGCD(votes[0][1], n)

    #We can derive the random int k used when encrypting the messages via
    usedK = ((z[0] - z[1])*As) % n
    """dk, Ak, Bk = extendedGCD(usedK, n)
    
    
    if (((votes[0][2] * usedK - z[0]) % n) * Ar) % n  == 0:
        print('ja')
    else: print(((votes[0][2] * usedK - z[0]) % n) % votes[0][1])"""
    
    #From k we derive the secret key and format it to work in ECPy
    sk = ((votes[0][2]*usedK - z[0]) * Ar) % n
    sk = ecpy.keys.ECPrivateKey(sk, curve)

    #Initialise the ECDSA signer
    signer = ECDSA()

    hashedMess = Hash.sha256('I won this election, by a lot!'.encode()).digest()

    #Sign with the specified k and format it as wished for
    signature = signer.sign_k(hashedMess, sk, k)
    signature = ecpy.formatters.decode_sig(signature)
        
    return signature
print('The non-valid votes in 1a) are: ' + str(verBalots(Q1_p, Q1_p, Q1_pk, Q1a_arr)))
print('The signature in 1b) is: ' + str(sign(Q1b_arr, Q1b_k, Q1_p)))
